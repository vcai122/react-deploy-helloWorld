{"version":3,"sources":["logo.svg","components/Hello.js","components/Message.js","components/Counter.js","components/ClassClick.js","components/FunctionClick.js","components/ChildComponent.js","components/ParentComponent.js","components/ConditionalGreetings.js","components/Form.js","components/Table.js","components/PureComp.js","components/RegComp.js","components/Timer.js","components/ParentComp.js","components/DumbTest.js","ClickyGameComponents/Timer.js","components/PostList.js","components/TimerApp.js","ClickyGameComponents/Button.js","ClickyGameComponents/Game.js","App.js","components/SpreadSheet.js","serviceWorker.js","index.js"],"names":["module","exports","Component","FunctionClick","ChildComponent","props","onClick","greetHandler","Table","PureComp","this","name","PureComponent","RegComp","Timer","startTime","myInterval","setInterval","calculateNewStates","setState","runState","stopTime","clearInterval","resetTime","ms","s","m","state","mNew","sNew","msNew","size","w","w2","style","fontWeight","fontSize","tableLayout","textAlign","color","width","updateState","setTimeout","alertScore","marginLeft","marginRight","marginTop","fontFamily","buttonStyle","padding","borderRadius","backgroundColor","height","Button","startButton","started","increment","resetButton","counterStyle","Game","prevState","count","newState","message","alert","timerRef","current","React","createRef","ref","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6c5d0328.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nclass Hello extends Component {\n    render() {\n        const {name, age} = this.props\n        // const {state1, state2} = this.props\n        return (\n            <div id ='hello' className='dummyClass'>\n                <h1>Hello World {name}, you are {age} years old</h1>\n            </div>\n        )\n    }\n}\n\n\n// const Hello = props =>{\n//     //jsx version:\n//     const {name, age} = props\n\n//     return(\n//         <div id ='hello' className='dummyClass'>\n//             <h1>Hello World {name}, you are {age} years old</h1>\n//         </div>\n//     )\n    \n//     // not jsx:\n//     // return React.createElement(\n//     //     'div', \n//     //     {id: 'hello', className: 'dummyClass'}, \n//     //     React.createElement('h1',null,'Hello World'))\n// }\n\nexport default Hello","import React, { Component } from 'react';\n\nclass Message extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            message: 'Welcome to this page!'\n        }\n    }\n\n    changeMessage(){\n        this.setState({\n            message: 'Stupid dumbass'\n        })\n    }\n\n\n    render(){\n        return(\n            <div>\n                <h1>\n                    {this.state.message}\n                </h1>\n                <button onClick = {() => this.changeMessage()}>\n                    Press if you are dumb\n                </button>\n            </div>\n        )\n    }\n\n}\n\nexport default Message","import React, { Component } from 'react'\n\nclass Counter extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             count: 0\n        }\n    }\n    \n    increment(){\n        // this.setState({\n        //     count: this.state.count+1\n        // })\n        this.setState((prevState, props) => ({\n            count: prevState.count +1\n            //can use props as well\n        }))\n    }\n\n    increment5(){\n        this.increment()\n        this.increment()\n        this.increment()\n        this.increment()\n        this.increment()\n    }\n\n    render() {\n        return (\n            <div>\n                <div> {this.state.count} </div> \n                <button onClick={()=> this.increment5()}> Increment</button>\n            </div>\n        )\n    }\n}\n\nexport default Counter\n","import React, { Component } from 'react'\n\nclass ClassClick extends Component {\n    \n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             message: 'hi'\n        }\n        // this.clickHandler = this.clickHandler.bind(this)\n    }\n    \n    // clickHandler(){\n    //     this.setState({\n    //         message: 'bye'\n    //     })\n    // }\n\n    clickHandler = () =>{\n        this.setState({\n            message: 'bye'\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div>{this.state.message} </div>\n                {/* <button onClick={this.clickHandler.bind(this)}>click me</button> */}\n                {/* <button onClick={()=>this.clickHandler()}>click me</button> */}\n                <button onClick={this.clickHandler}>click me</button>\n                 \n            </div>\n        )\n    }\n}\n\nexport default ClassClick\n","import React from 'react'\n\nfunction FunctionClick() {\n    function clickHandler() {\n        console.log('clicked')\n    }\n    return (\n        <div>\n            <button onClick={clickHandler}>click</button>\n        </div>\n    )\n}\n\nexport default FunctionClick\n","import React from 'react'\n\nfunction ChildComponent(props) {\n    return (\n        <div>\n            <button onClick = {() => props.greetHandler('child')}>greeParent</button>\n        </div>\n    )\n}\n\nexport default ChildComponent\n","import React, { Component } from 'react'\nimport ChildComponent from './ChildComponent'\n\nclass ParentComponent extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             parentName: 'Parent'\n        }\n        this.greetParent = this.greetParent.bind(this)\n    }\n\n    greetParent(childName){\n        alert(`Hello ${this.state.parentName} from ${childName}`)\n    }\n    \n    render() {\n        return (\n            <div>\n                <ChildComponent greetHandler={this.greetParent} />\n            </div>\n        )\n    }\n}\n\nexport default ParentComponent\n\n","import React, { Component } from 'react'\n\nclass ConditionalGreetings extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             loggedIn: true\n        }\n    }\n    \n    render() {\n        return this.state.loggedIn ?(\n            <div>\n                 yes\n            </div>\n        ): (\n            <div>\n                 no\n            </div>\n        )\n    }\n}\n\nexport default ConditionalGreetings\n","import React, { Component } from 'react'\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props)\n    \n       this.state = {\n            username: '',\n            comments: '',\n            choice: 'a'\n        }\n    }\n\n    handleUsernameChange = (e)=> {\n        this.setState({\n            username: e.target.value\n        })\n    }\n\n    handleCommentsChange = (e) =>{\n        this.setState({\n            comments: e.target.value\n        })\n    }\n\n    handleChoiceChange = (e) =>{\n        this.setState({\n            choice: e.target.value\n        })\n    }\n\n    handleSubmit = (e)=>{\n        alert(`${this.state.username} ${this.state.comments} ${this.state.choice}`)\n        e.preventDefault()\n    }\n\n\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div>\n                    <label>Username </label>\n                    <input \n                    type = \"text\"\n                    value={this.state.username}\n                    onChange={this.handleUsernameChange} \n                    />\n                </div>\n                <div>\n                    <label>Comments </label>\n                    <textarea\n                    value={this.state.comments} \n                    onChange={this.handleCommentsChange} \n                    />\n                </div>\n                <div>\n                    <label>Topic</label>\n                    <select value={this.state.choice} onChange={this.handleChoiceChange}>\n                        <option value='a'>Choice A</option>\n                        <option value='b'>Choice B</option>\n                        <option value='c'>Choice C</option>\n                    </select>\n                </div>\n                <button type=\"submit\">Submit</button>\n            </form>\n            \n        )\n    }\n}\n\nexport default Form\n","import React from 'react'\nimport Columns from './Columns'\n\nfunction Table() {\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <Columns/>\n                </tr>\n            </tbody>\n        </table>\n    )\n}\n\nexport default Table\n","import React, { PureComponent } from 'react'\n\nclass PureComp extends PureComponent {\n    render() {\n        return (\n            <div>\n                Pure Component {this.props.name}\n            </div>\n        )\n    }\n}\n\nexport default PureComp\n","import React, { Component } from 'react'\n\nclass RegComp extends Component {\n    render() {\n        return (\n            <div>\n                Regular Component {this.props.name}\n            </div>\n        )\n    }\n}\n\nexport default RegComp\n","import React, { Component } from 'react'\n\nvar incAmount = 60;\n\nclass Timer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n             ms: 0, \n             s:0, \n             m: 0,\n             runState: 0\n            //  0 is haven't started, 1 is running, 2 is paused\n        }\n    }\n\n    startTime = () =>{\n        this.myInterval = setInterval( ()=>{\n            this.calculateNewStates()\n         }, incAmount) \n         this.setState({\n            runState: 1\n        })\n    }\n\n    stopTime = () =>{\n        clearInterval(this.myInterval)\n        this.setState({\n            runState: 2\n        })\n    }\n\n    resetTime = () =>{\n        this.setState({\n            ms: 0, \n            s:0, \n            m: 0,\n            runState: 0\n        })\n    }\n\n    calculateNewStates(){\n        const {ms,s,m} = this.state\n        let mNew = m\n        let sNew = s\n        let msNew = ms+incAmount\n        if (msNew>=1000){\n            sNew++\n            msNew-=1000\n        }\n        if (sNew>=60){\n            mNew++\n            sNew-=60\n        }\n\n        this.setState({\n            ms: msNew,\n            s: sNew,\n            m: mNew\n        })\n        \n    }\n    \n    render() {\n        const {ms,s,m} = this.state\n        const {size} = this.props\n        let w = 1.5*size\n        let w2 = 0.25*size\n        return (\n\n            <center><table style={{\n                fontWeight: 'bold',\n                fontSize: size,\n                tableLayout: \"fixed\",\n                textAlign: 'center',\n                color: 'white'\n            }}>\n            <td style={{ width: w }}> {m<10? '0'+m : m} </td>\n            <td style={{ width: w2 }}> : </td>\n            <td style={{ width: w }}> {s<10? '0'+s : s} </td>\n            <td style={{ width: w2 }}> : </td>\n            <td style={{ width: w }}> {ms<100? '0'+ms/10 : ms/10} </td>\n            </table></center>\n\n        )\n    }\n\n\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport PureComp from './PureComp'\nimport RegComp from './RegComp'\n\nclass ParentComp extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             name: 'Bob'\n        }\n    }\n\n    componentDidMount(){\n        setInterval( ()=>{\n          this.setState({\n              name: 'Bob'\n          })  \n        } , 2000 )\n    }\n    \n    render() {\n        return (\n            <div>\n               Parent Component\n               <RegComp name={this.state.name}></RegComp>\n               <PureComp name={this.state.name}></PureComp>\n            </div>\n        )\n    }\n}\n\nexport default ParentComp\n","import React, { Component } from 'react'\n\nclass DumbTest extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             name: ''\n        }\n    }\n    \n    componentDidMount(){\n        \n        this.setState({\n            // name: prompt(\"Name\")\n            name: 'Dumbo',\n            clicked: false\n        })\n    }\n\n    clickHandler = ()=>{\n        this.setState({\n            clicked: true\n        })\n    }\n\n    render() {\n        const {name, clicked} = this.state\n        if (clicked){\n            return(\n                <h1>\n                    HA DUMB\n                </h1>\n            )\n        }else{\n            return (\n                <>\n                <h1>\n                    <div> Hi {name}! </div>\n                    <div> Welcome to this page! </div>\n                </h1>\n                <button onClick={this.clickHandler}>Press this button if you are dumb</button>\n                </>\n            ) \n        }\n    }\n}\n\nexport default DumbTest\n","import React, { Component } from 'react'\n\nvar incAmount = 40;\n\nclass Timer extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            ms: 0, \n            s:0, \n            m: 0\n        }\n    }\n\n    startTime = () =>{\n        this.myInterval = setInterval( ()=>{\n            this.calculateNewStates()\n        }, incAmount)\n        this.props.updateState(1)\n    }\n\n    stopTime = () =>{\n        clearInterval(this.myInterval)\n        this.props.updateState(2)\n    }\n\n    resetTime = () =>{\n        this.setState({\n            ms: 0, \n            s:0, \n            m: 0,\n        })\n        this.props.updateState(0)\n    }\n    \n    calculateNewStates = () =>{\n        const {ms,s,m} = this.state\n        let mNew = m\n        let sNew = s\n        let msNew = ms+incAmount\n        if (msNew>=1000){\n            sNew++\n            msNew-=1000\n        }\n        if (sNew>=60){\n            mNew++\n            sNew-=60\n        }\n\n        this.setState({\n            ms: msNew,\n            s: sNew,\n            m: mNew\n        })\n\n        if (sNew===5){\n            this.stopTime()\n            setTimeout( ()=>{this.props.alertScore()} , 5)\n        }\n\n    }\n\n    render() {\n        const {ms, s, m} = this.state\n        let fontSize = 7\n        let w = 0.5*fontSize\n        fontSize = `${fontSize}vw`\n        w = `${w}vw`\n        \n\n        return (\n            <table style={{\n                fontSize: fontSize,\n                tableLayout: \"fixed\",\n                color: 'white',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n                marginTop: '2vw',\n                fontFamily: 'Thonburi-Light',\n\n            }}\n            ><thead><tr>\n            <th style={{ width: w }}> {m<10? '0'+m : m} </th>\n            <th style={{ width: w }}>:</th>\n            <th style={{ width: w }}> {s<10? '0'+s : s} </th>\n            <th style={{ width: w }}>:</th>\n            <th style={{ width: w }}> {ms<100? '0'+ms/10 : ms/10} </th>\n            </tr></thead></table>\n        )\n    }\n}\n\nexport default Timer\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass PostList extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             posts: []\n        }\n    }\n\n    componentDidMount(){\n        axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then(response => {\n            console.log(response)\n            this.setState({\n                posts: response.data\n            })\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n    \n    render() {\n        const{posts} = this.state\n        return (\n            <div>\n                List of posts\n                {\n                    posts.length ?\n                    posts.map(post => <div key = {post.id}> {post.title} </div>)\n                    : <div> hi </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default PostList\n","import React, { Component } from 'react'\nimport Timer from './Timer'\n\nclass TimerApp extends Component {\n    constructor(props) {\n        super(props)\n        this.componentRef = React.createRef()\n        this.state ={\n            runState: 0\n        }\n    }\n\n    \n\n    startTime = () =>{\n        this.componentRef.current.startTime()\n        this.setState({\n            runState: 1\n        })\n    }\n\n    stopTime = () =>{\n        this.componentRef.current.stopTime()\n        this.setState({\n            runState: 2\n        })\n    }\n    resetTime = () => {\n        this.componentRef.current.resetTime()\n        this.setState({\n            runState: 0\n        })\n    }\n    \n    render() {\n        const {runState} = this.state\n        return (\n            <>\n            <Timer ref={this.componentRef}/>\n\n            {runState == 0 &&\n                <button onClick={this.startTime}>Start</button>\n            }\n            {runState == 1 && \n                <button onClick={this.stopTime}>Stop</button>\n            }\n            {runState == 2 && \n                <>\n                <button onClick={this.startTime}>Resume</button>\n                <button onClick={this.resetTime}>Reset</button>\n                </>\n            }\n\n            </>\n        )\n    }\n}\n\nexport default TimerApp\n","import React, { Component } from 'react'\n\nconst buttonStyle = {\n    padding: 1,\n    borderRadius: 10,\n    backgroundColor: '#ebebeb',\n    width: '85vw',\n    height: '65vh',\n    fontSize: '5vw',\n    fontFamily: 'Verdana'\n}\n\nclass Button extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n             started: false\n        }\n    }\n    \n    startButton = ()=> {\n        if (!this.state.started){\n            this.props.startTime()\n            this.setState({  started: true })\n        }\n        this.props.increment()\n    }\n\n    resetButton = ()=>{\n        this.setState({\n            started: false,\n        })\n        this.props.resetTime()\n    }\n\n    render() {\n        return (\n            <>\n                {this.props.runState===2 && \n                <button style={buttonStyle} onClick={this.resetButton}> Restart </button>\n                }\n\n                {this.props.runState===1 &&\n                <button style={buttonStyle} onClick={this.props.increment}></button>                \n                }\n\n                {this.props.runState===0 &&\n                <button style={buttonStyle} onClick={this.startButton}> Click to start </button>                \n                }\n            </>\n        )\n    }\n}\n\nexport default Button\n","import React, { Component } from 'react'\nimport Timer from './Timer';\nimport Button from './Button';\n\nconst counterStyle = {\n    fontFamily: 'Thonburi-Light',\n    fontSize: '3vw',\n    fontWeight: 'bold'\n}\n\nclass Game extends Component {\n    constructor(props) {\n        super(props)\n        this.timerRef = React.createRef()\n        this.state = {\n             count: 0,\n             runState: 0\n            //  0 is haven't started, 1 is running, 2 is stopped\n        }\n    }\n\n    increment = () =>{\n        this.setState((prevState) => ({\n            count: prevState.count +1\n        }))\n    }\n\n    updateState = (newState)=>{\n        this.setState({\n            runState: newState\n        })\n    }\n\n    alertScore = ()=>{\n        const {count} = this.state\n        let message\n        if (count < 15){\n            message = \"You're about as fast as a Sanjay. SMH slowpoke\"\n        }\n        else if (count < 30){\n            message = 'Bruh my grandma could click faster and she has arthritis'\n        }\n        else if (count < 45){\n            message = \"Mehh, it's alright I guess?\"\n        }\n        else{\n            message = \"Damn your fast. Want a cookie?\"\n        }\n        message += `\\n\\nYou clicked ${count} times in 5 seconds!\\nThat's a whopping ${count/5} clicks per second!\\n`\n        alert(message)\n    }\n\n    startTime = () => {this.timerRef.current.startTime()}\n    \n    resetTime = ()=> {\n        this.timerRef.current.resetTime()\n        this.setState({ count: 0 }) \n        //runState is updated by the timer resetTime\n    }\n\n    \n    render() {\n        const {runState, count} = this.state\n        return (\n            <>\n            <Timer\n                ref = {this.timerRef}\n                updateState = {this.updateState}\n                alertScore = {this.alertScore}\n            />\n            <div style = {counterStyle}> Count: {count} </div>\n            <Button  \n                startTime={this.startTime} \n                resetTime={this.resetTime} \n                increment={this.increment}\n                runState={runState}\n            />\n\n            </>\n        )\n    }\n}\n\nexport default Game\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Hello from './components/Hello'\nimport Message from './components/Message'\nimport Counter from './components/Counter';\nimport FunctionClick from './components/FunctionClick';\nimport ClassClick from './components/ClassClick';\nimport ParentComponent from './components/ParentComponent';\nimport ConditionalGreetings from './components/ConditionalGreetings';\nimport NameList from './components/NameList';\nimport Form from './components/Form';\nimport FragmentDemo from './components/FragmentDemo';\nimport Table from './components/Table';\nimport PureComp from './components/PureComp';\nimport ParentComp from './components/ParentComp';\nimport Timer from './components/Timer';\nimport DumbTest from './components/DumbTest';\nimport PostList from './components/PostList';\nimport TimerApp from './components/TimerApp';\nimport ClickyGame from './ClickyGameComponents/Game';\nimport SpreadSheet from './components/SpreadSheet';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n\n        <ClickyGame /> \n        {/* <SpreadSheet/> */}\n\n        {/* <PostList/> */}\n\n        {/* <DumbTest/> */}\n\n        {/* <ParentComp/> */}\n        {/* <Table/> */}\n        {/* <FragmentDemo /> */}\n        {/* <Form /> */}\n        {/* <NameList/> */}\n        {/* <ConditionalGreetings /> */}\n        {/* <ParentComponent /> */}\n        {/* <FunctionClick /> */}\n        {/* <ClassClick /> */}\n\n        {/* <Hello name='Bob' age={1}/>\n        <Hello name='Joe' age={2}/>\n        <Hello name='BobJoe' age={3} /> */}\n        \n        {/* <Message /> */}\n\n        {/* <Counter /> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nclass SpreadSheet extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             posts: []\n        }\n    }\n\n    componentDidMount(){\n        axios.get('https://spreadsheets.google.com/feeds/cells/1cOxqRbxTG_crYyEWRMvpAAVqYz-F22rKIHgDdSMfE7g/od6/public/basic?alt=json')\n        .then(response => {\n            console.log(response.data.feed.entry)\n            this.setState({\n                posts: response.data.feed.entry\n            })\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n    \n    render() {\n        const{posts} = this.state\n        return (\n            <div>\n                List of posts\n                {\n                    posts.length ?\n                    posts.map(post => <div key = {post.id.$t}> {post.content.$t} </div>)\n                    : <div> no data </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default SpreadSheet\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}